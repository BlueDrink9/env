#!/bin/sh

# Set XDG_DATA_HOME or default path
XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
BOOKMARK_FILE="$XDG_DATA_HOME/dir_fzf_bookmarks"
SCRIPT_NAME="bmm"

# Check if the bookmarks file exists, if not create it
[ ! -f "$BOOKMARK_FILE" ] && touch "$BOOKMARK_FILE"

main(){
    # Main script logic
    case "$1" in
        -a|--add)
            add_bookmark "$2"
            ;;
        -d|--delete)
            delete_bookmark "$2"
            ;;
        -l|--list)
            list_bookmarks
            ;;
        --generate-completions)
            generate_completions
            ;;
        --generate-alias)
            generate_alias
            ;;
        -h|--help)
            display_help
            ;;
        "")
            chosen=$(list_bookmarks | fzf)
            if [ ! -d "$chosen" ]; then
                echoerr "directory '$chosen' does not exist"
            else
                # Echo the dir so user can CD to it.
                echo "$chosen"
            fi
            ;;
        *)
            if [ -d "$1" ]; then
                add_bookmark "$1"
            else
                echoerr "Invalid argument. Use -h for help."
            fi
            ;;
    esac
}

echoerr(){
    echo "$@" >&2
}

# Function to list bookmarks
list_bookmarks() {
    cat "$BOOKMARK_FILE"
}

# Function to add bookmark
add_bookmark() {
    if [ ! -d "$1" ]; then
        echoerr "Directory '$1' does not exist."
    elif grep -qx "$1" "$BOOKMARK_FILE"; then
        echoerr "Directory '$1' already bookmarked."
    else
        echo "$1" >> "$BOOKMARK_FILE"
    fi
}

# Function to delete bookmark
delete_bookmark() {
    grep -vx "$1" "$BOOKMARK_FILE" > "${BOOKMARK_FILE}.tmp" && mv "${BOOKMARK_FILE}.tmp" "$BOOKMARK_FILE"
}

generate_alias() {
  echo 'alias bm="cd \"\$('$SCRIPT_NAME')\""'
}

generate_completions() {
    # Define the directories where to store completion scripts
    BASH_COMPLETION_DIR="$XDG_DATA_HOME/bash-completion/completions"
    mkdir -p "$BASH_COMPLETION_DIR"

    opts="-a --add -d --delete -l --list --generate-alias --generate-completions -h --help"

    # Generate Bash completion script
    cat >| "$BASH_COMPLETION_DIR/$SCRIPT_NAME" << EOF
#!/usr/bin/env bash
_$SCRIPT_NAME() {
    local cur prev opts bookmarks
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    bookmarks=\$(cat "$BOOKMARK_FILE")

    if [[ \${cur} == -* ]]; then
        COMPREPLY=( \$(compgen -W "${opts}" -- \${cur}) )
        return 0
    fi

    case "\${prev}" in
        -d|--delete)
            COMPREPLY=( \$(compgen -W "\${bookmarks}" -- \${cur}) )
            ;;
        *)
            COMPREPLY=( \$(compgen -A file -o plusdirs -- \${cur}) )
            ;;
    esac
    return 0
}
complete -F _$SCRIPT_NAME $SCRIPT_NAME
EOF

    ZSH_COMPLETION_DIR="$XDG_DATA_HOME/zsh-completion"
    mkdir -p "$ZSH_COMPLETION_DIR"
    # Generate Zsh completion script
    cat >| "$ZSH_COMPLETION_DIR/_$SCRIPT_NAME" << EOF
#compdef $SCRIPT_NAME

_$SCRIPT_NAME() {
    local -a bookmarks
    local curcontext="\$curcontext" state line
    typeset -A opt_args

    # Define script options
    local opts="$opts"

    # Load bookmarks from file
    bookmarks=("\${(@f)\$(<"$BOOKMARK_FILE")}")

    _arguments -C \
        '*:: :->args'

    case \$state in
        args)
            if [[ \$words[CURRENT-1] == "-d" || \$words[CURRENT-1] == "--delete" ]]; then
              _values 'Bookmarks' \$bookmarks
            elif [[ \$words[CURRENT] == -* ]]; then
                _alternative \
                    'options:option:(\${(s: :)opts})'
            else
                _files -/
            fi
    esac
}

_$SCRIPT_NAME

if [[ "\$(basename -- \$0)" != "_$SCRIPT_NAME" ]]; then
    _$SCRIPT_NAME
fi
EOF

    # Instructions for the user
    echo "Completion scripts generated."
    echo "For Zsh, add the following lines to your .zshrc:"
    echo "fpath=('$ZSH_COMPLETION_DIR' \$fpath)"
    echo "autoload -Uz compinit && compinit"
}
# Function to display help
display_help() {
    echo "Usage: $SCRIPT_NAME [OPTION]... [DIRECTORY]"
    echo "Bookmark manager script. Without args, opens a list of bookmarks and echos the selected one."
    echo "Suggested use is with an alias (see --generate-alias)"
    echo "  [-a, --add] [DIRECTORY]        Add a new bookmark."
    echo "  -d, --delete [DIRECTORY]     Delete a bookmark."
    echo "  -l, --list                   List all bookmarks."
    echo "  --generate-completions       Generate completions for bash and zsh."
    echo "  --generate-alias             Output text for a recommended bash alias. Use like '$SCRIPT_NAME --generate-alias >> ~/.bashrc"
    echo "  -h, --help                   Display this help and exit."
}

main "$@"
