# -*-  mode: shell-script; -*-
# vim: set ft=sh:

# XXX For debugging, call `bash_debug_log` with optional logfile param
# to show all bash commands run. Default logfile is ${HOME}/.debug_log_bashsetx.
# (More plusses mean different file/function)

# # If not running interactively, don't do anything
# case $- in
#     *i*) ;;
#       *) return;;
# esac

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export DOTFILES_DIR=$(cd "${SCRIPT_DIR}/.." && pwd)

# Reload/source inputrc
# bind -f ${SCRIPT_DIR}/inputrc.sh
INPUTRC="${SCRIPT_DIR}/inputrc.sh"
BASH_ENV="${SCRIPT_DIR}/aliases.sh" # Aliases are used for all readline apps.
source ${SCRIPT_DIR}/settings.sh
source ${SCRIPT_DIR}/functions.sh
source ${SCRIPT_DIR}/aliases.sh
source ${SCRIPT_DIR}/prompt.sh

# # Run TMUX, close on exit.
#     { tmux attach || exec tmux new-session && exit;}
# fi
# test if this is an ssh shell
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    export SESSION_TYPE=remote/ssh
    export SSHSESSION=1
    # many other tests omitted
else
    case $(ps -o comm= -p $PPID) in
        sshd|*/sshd) SESSION_TYPE=remote/ssh;;
    esac
fi

# Run tmux on ssh connect

# Check if interactive is part of shell options (running interactively)
case $- in
    *i*)

    if command -v tmux>/dev/null; then
        if [[ ! $TERM =~ screen ]] && [[ -z $TMUX ]]; then
            PNAME="$(ps -o comm= $PPID)";
            # useTmuxFor="login sshd gnome-terminal init wslbridge-backe"
            useTmuxFor="sshd"
            # if contains "$useTmuxFor" "$PNAME"; then
            if [[ "$SESSION_TYPE" = "remote/ssh" ]]; then
                if tmux ls 2> /dev/null | grep -q -v attached; then
                    exec tmux attach -t $(tmux ls 2> /dev/null | grep -v attached | head -1 | cut -d : -f 1)
                else
                    exec tmux
                fi
            fi
        fi
    fi
    ;;
esac
