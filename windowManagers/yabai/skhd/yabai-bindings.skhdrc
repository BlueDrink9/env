# vim:ft=sh

# --------------------
# skhdrc-chunkwm-bindings
# --------------------

# Create a prefix mode that times out after 5 seconds. Qes synthesises a keypress?
#default < shift + cmd - o ; prefix
# prefix < escape ; default
# :: prefix @   : yabai border::color 0xFFFAC863; sleep 5; qes -k "escape"


# Set up yabai with a modal entry, and using the same shortcuts as I
# use for vim, tmux, etc.
# Declare mode. Use green border when in mode, blue otherwise.
# @ swallows unassigned keybinds so mis-pressing won't type.
:: manage @ : yabai -m config active_window_border_color "0xff$manage_border_color"

:: default : yabai -m config active_window_border_color "0xff$focused_border_color"; \
  yabai -m config focus_follows_mouse autoraise

# Passthrough should have nothing associated with it.
# Also disable ffm to allow cmd-dragging.
# Border colour is default but transparent.
:: passthrough : yabai -m config active_window_border_color "0x55$focused_border_color"; \
  yabai -m config focus_follows_mouse off

# Using this mode, you will time out after 5 seconds and send escape.
# Can't return directly to default, see koekeishiya/skhd/issues/37.
:: prefix @ : yabai -m config active_window_border_color "0xFF$prefix_border_color"; \
  sleep 5; \
  skhd -k "escape"


manage,passthrough,prefix < escape ; default
manage,passthrough,prefix < return ; default
# option - w enters window management mode
alt - w ; manage
manage < alt - w ; default

alt - q ; passthrough


# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east
manage < alt - h : yabai -m window --focus west
manage < alt - j : yabai -m window --focus south
manage < alt - k : yabai -m window --focus north
manage < alt - l : yabai -m window --focus east

# close focused window
alt - x : yabai -m window --close
alt + shift - x : skhd -k "cmd-q"
manage < x : yabai -m window --close
# Minimize
alt - z : osascript -e 'tell application "System Events" to keystroke "m" using {command down}'

# swap window
manage < shift - h : yabai -m window --swap west
manage < shift - j : yabai -m window --swap south
manage < shift - k : yabai -m window --swap north
manage < shift - l : yabai -m window --swap east

# move window
manage < shift + alt - h : yabai -m window --warp west
manage < shift + alt - j : yabai -m window --warp south
manage < shift + alt - k : yabai -m window --warp north
manage < shift + alt - l : yabai -m window --warp east

# make floating window fill screen
manage < alt - up     : yabai -m window --grid 1:1:0:0:1:1
# make floating window fill left-half of screen
manage < alt - left   : yabai -m window --grid 1:2:0:0:1:1
# make floating window fill right-half of screen
manage < alt - right  : yabai -m window --grid 1:2:1:0:1:1

# Want to be expanding on one key, contracting on the opposite.
# Adds an amount to the x or y, so negatives have to be used to expand left and
# up.
manage < shift - down : yabai -m window --resize bottom:0:$window_resize_delta; \
  yabai -m window --resize top:0:-$window_resize_delta
manage < shift - up : yabai -m window --resize top:0:$window_resize_delta; \
  yabai -m window --resize bottom:0:-$window_resize_delta
manage < shift - right : yabai -m window --resize right:$window_resize_delta:0; \
  yabai -m window --resize left:-$window_resize_delta:0
manage < shift - left : yabai -m window --resize left:$window_resize_delta:0; \
  yabai -m window --resize right:-$window_resize_delta:0

# Move floating windows. Uses a hack script.
manage < down	 : yabai -m window --move rel:0:$window_resize_delta
manage < up	   : yabai -m window --move rel:0:-$window_resize_delta
manage < left	 : yabai -m window --move rel:-$window_resize_delta:0
manage < right : yabai -m window --move rel:$window_resize_delta:0

# manage < cmd - j : yabai -m window --focus prev
# manage < cmd - k : yabai -m window --focus next

# rotate tree
manage < r : yabai -m space --rotate 90
manage < shift - r : yabai -m space --rotate 270

# Re-make binary proportions. Equals key.
manage < 0x18 : yabai -m space --balance  # equals key

# mirror tree
manage < s : yabai -m space --mirror y-axis
manage < v : yabai -m space --mirror x-axis

# toggle window fullscreen
manage < f       : yabai -m window --toggle zoom-fullscreen
manage < cmd - f : yabai -m window --toggle native-fullscreen
# toggle window parent zoom
manage < alt - f : yabai -m window --toggle parent
# toggle window split type
manage < alt - e : yabai -m window --toggle split
# toggle window fade
manage < alt - q : yabai -m window --toggle fade
# pinned/always on top.
manage < p : yabai -m window --toggle topmost
# toggle sticky (appears on all desktops)
# manage < p : yabai -m window --toggle sticky


# float / unfloat window and center on screen
manage < u : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle sticky, float and resize to picture-in-picture size.
manage < alt - p : yabai -m window --toggle sticky;\
          yabai -m window --grid 5:5:4:0:1:1

# float next window to be tiled
# manage < ctrl - u : yabai -m config window_float_next 1

# change layout of desktop
manage < shift - t : yabai -m space --layout bsp
manage < shift - u : yabai -m space --layout float
# Not yet added
manage < shift - m : yabai -m space --layout monocle

# set insertion point for focused container. Prefixed, so will auto-exit mode.
# Undo by redoing in same direction
# manage < ctrl - c : yabai -m window --insert cancel
manage < h : yabai -m window --insert west; skhd -k "escape"
manage < j : yabai -m window --insert south; skhd -k "escape"
manage < k : yabai -m window --insert north; skhd -k "escape"
manage < l : yabai -m window --insert east; skhd -k "escape"


### Desktops/spaces ###

# create/detroy desktop
manage < n : yabai -m space --create
manage < shift - n : yabai -m space --destroy
# create desktop and follow focus
manage < ctrl + alt - n : yabai -m space --create; \
  yabai -m space --focus last; \
  skhd -k "escape"

# Fast focus desktop. Requires scripting addon.
# Use this one if the scripting addon is installed.
alt - 0x21  : yabai -m space --focus prev
alt - 0x1E  : yabai -m space --focus next
# Alternative is to set these shortcuts under mission control in sys
# preferences, which is done under osx setup script
# alt - 0x21  : skhd -k "ctrl - left"
# alt - 0x1E  : skhd -k "ctrl - right"
manage < cmd + alt - x : yabai -m space --focus recent

# send window to desktop
manage < shift - x : yabai -m window --space recent
# 0x21, 0x1E: keys for [ and ]
# Move to next
alt + shift - 0x21  : yabai -m window --space prev
alt + shift - 0x1E  : yabai -m window --space next
# Move and focus
alt + ctrl - 0x21  : yabai -m window --space prev; yabai -m space --focus prev
alt + ctrl - 0x1E  : yabai -m window --space next; yabai -m space --focus next
manage < 0x21 : yabai -m window --space prev; yabai -m space --focus prev
manage < 0x1E : yabai -m window --space next; yabai -m space --focus next

alt + shift - 6 : yabai -m space --focus recent  # ^
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8

manage < 1 : yabai -m space --focus 1
manage < 2 : yabai -m space --focus 2
manage < 3 : yabai -m space --focus 3
manage < 4 : yabai -m space --focus 4
manage < 5 : yabai -m space --focus 5
manage < 6 : yabai -m space --focus 6
manage < 7 : yabai -m space --focus 7
manage < 8 : yabai -m space --focus 8

manage < shift - 1 : yabai -m window --space 1
manage < shift - 2 : yabai -m window --space 2
manage < shift - 3 : yabai -m window --space 3
manage < shift - 4 : yabai -m window --space 4
manage < shift - 5 : yabai -m window --space 5
manage < shift - 6 : yabai -m window --space 6
manage < shift - 7 : yabai -m window --space 7
manage < shift - 8 : yabai -m window --space 8

# shift + cmd - 4 : yabai border::clear

# Mouse bindings are set in chunkwm options

# Desktops {]}

### Monitor ### {[}

# focus monitor
cmd + alt - 0x21  : yabai -m display --focus prev # left bracket
cmd + alt - 0x1E  : yabai -m display --focus next # right bracket
cmd + alt - h  : yabai -m display --focus prev
cmd + alt - l  : yabai -m display --focus next
manage < cmd + alt - h  : yabai -m display --focus prev
manage < cmd + alt - l  : yabai -m display --focus next
manage < cmd - 0x1E  : yabai -m display --focus next # right bracket
manage < cmd - 0x21  : yabai -m display --focus prev # left bracket
manage < cmd - 0x1E  : yabai -m display --focus next # right bracket
cmd + alt - 1  : yabai -m display --focus 1
cmd + alt - 2  : yabai -m display --focus 2
cmd + alt - 3  : yabai -m display --focus 3
# send window to monitor
alt + shift + cmd - 0x21  : yabai -m window --display prev
alt + shift + cmd - 0x1E  : yabai -m window --display next
manage < shift + cmd - 0x21  : yabai -m window --display prev
manage < shift + cmd - 0x1E  : yabai -m window --display next
manage < shift + cmd - 1  : yabai -m window --display 1
manage < shift + cmd - 2  : yabai -m window --display 2
manage < shift + cmd - 3  : yabai -m window --display 3
# send window to monitor and follow focus
alt + ctrl + cmd - 0x21  : yabai -m window --display prev; yabai -m display --focus prev
alt + ctrl + cmd - 0x1E  : yabai -m window --display next; yabai -m display --focus next
manage < ctrl + cmd - 0x21  : yabai -m window --display prev; yabai -m display --focus prev
manage < ctrl + cmd - 0x1E  : yabai -m window --display next; yabai -m display --focus next
manage < ctrl + cmd - 1     : yabai -m window --display 1;    yabai -m display --focus 1
manage < ctrl + cmd - 2     : yabai -m window --display 2;    yabai -m display --focus 2
manage < ctrl + cmd - 3     : yabai -m window --display 3;    yabai -m display --focus 3

### Monitor ### {]}
