# vim: ft=cfg ts=2 sw=2 ai
[alias]
	s = status
	c = commit
  a = add
  d = diff
	ca = commit --all
	cam = commit --amend
	cup = commit --amend --no-edit
	cupa = commit --all --amend --no-edit
  # diff = diff --ignore-space-change
  # Word- and character-level diffs. Colour words can take regex, here used to
  # fake char-level diff. Plain diff shows the diffs with markup in-line as
  # well as characters.
  wdiff = diff --ignore-space-change --word-diff=plain --color-words
  cdiff = diff --ignore-space-change --word-diff=plain --color-words=.
  csvdiff = diff --ignore-space-change --word-diff=plain --color-words='[^,]+'
  diffw = diff --ignore-space-change --word-diff=porcelain --color-words
  diffc = diff --ignore-space-change --word-diff=porcelain --color-words=.
  diffcsv = diff --ignore-space-change --word-diff=porcelain --color-words='[^,]+'
  unstage = reset HEAD
  reload = checkout --
  # Way nicer and more compact way to view logs. Pass -p to see line differences.
  plog = "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
  ls = 'branch'
  newbranch = checkout -b
  br = branch
  co = checkout
  rc = rebase --continue
  reab = rebase --abort
  resk = rebase --skip
  chp = cherry-pick
  chpc = cherry-pick --continue
  chpab = cherry-pick --abort
  amend = commit --amend
  fpush = push --force
  enforce = push --force-with-lease
  pushnew = "!git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)"
  merge-feature = merge --no-ff
  mt = mergetool
  conflict = !vim +Conflicted
	search = "log --pickaxe-regex -p --color-words -S"
  ls = log --oneline
  atag = tag -a
  fix = !git commit --fixup $1 && git rebase --autosquash
  merge-into = !sh -c '_CURRENT_BRANCH=$(git symbolic-ref --short HEAD) && git checkout $1 && git merge $_CURRENT_BRANCH && unset _CURRENT_BRANCH -'
  add-fork = !sh -c 'git remote add fork git@github.com:bluedrink9/$(basename "$(git config --get remote.origin.url)")'
  # Undo mode changes
  permission-reset = !sh -c 'git diff -p -R --no-ext-diff --no-color | grep -E \"^(diff|(old|new) mode)\" --color=never | git apply'



[credential]
  helper = cache --timeout=3600
[core]
	# editor = vim --cmd \"let g:liteMode=1\"
  # Checkout as-is, commit unix
  autocrlf = input
  # Checkout win-style, commit unix
  # autocrlf = true
  safecrlf = warn
  eol      = lf
  fileMode = false  # Don't track filesystem executable bit

[merge]
  conflictstyle = zdiff3
  # tool = vimdiff
  # tool = vimdiff4
  # tool = fugative
  tool = vim-conflicted
  # Do virtual check in/out to resolve line ending conflicts when merging
  renormalise = true
[mergetool]
  prompt = false
  TrustExitCode = true
  # Prevents .orig files being generated during merges.
  keepBackup = false

[mergetool "vimdiff4"]
  cmd = vim -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
  TrustExitCode = true
[mergetool "fugative"]
  cmd = vim -f -c "Gdiff" "$MERGED"
# Requires vim plugin... but then again, so does fugative. This one is loaded in main.
[mergetool "vim-conflicted"]
  cmd = vim +Conflicted

# Record resolutions of merges to apply automatically if they occur again.
[rerere]
  enabled = 1
[diff]
  colorMoved = zebra
  # tool = vimdiff2
[difftool]
  TrustExitCode = true
[difftool "vimdiff2"]
  cmd = vim -d $LOCAL $REMOTE
[pull]
  rebase = true
[push]
  # Autopush annotated tags
  followTags = true
  autoSetupRemote = true
[rebase]
  autoStash = true
# Gives diffs in commit message
[commit]
  verbose = true

# diffs for word files use pandoc
[diff "pandoc"]
  textconv=pandoc --to=markdown
  prompt = false

[advice]
  # Tells you non-fastforwarding pushes need to force or pull first
  pushNonFastForward = false
  # Gives commands for unstaging/checking out files
  statusHints        = false
  # Reminder to stash/commit changes if a conflict would occur
  # commitBeforeMerge  = false
  # Reminder about how to resolve/fix conflicts
  # resolveConflict    = false
  # Skip warnings about automatic name setting from domain email
  # implicitIdentity   = false
  # detachedHead       = false
[init]
  defaultbranch = main
