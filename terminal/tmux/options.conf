# vim:ft=tmux


set-option -g update-environment "SSH_AUTH_SOCK SSH_CONNECTION DISPLAY ${TERMOPTIONS}"
# set-option -g update-environment "SSH_AUTH_SOCK \
#                                   SSH_CONNECTION \
#                                   DISPLAY \
#                                   TERM_PROGRAM \
#                                   USENF \
#                                   USEPF \
#                                   COLORTERM"


# based on https://stackoverflow.com/a/40902312/1046584
# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES
# TODO possibly have these as their own files if there are too many options per version.
# Then can just source in the version guard, and have normal syntax
# highlighting for the rest.
# This doesn't always eem to get set properly... so I set the env variable
# properly in bash profile anyway.
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"

if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1 ]' \
  "set -g mouse-select-pane on; set -g mode-mouse on; \
    set -g mouse-resize-pane on; set -g mouse-select-window on"

# In version 2.1 "mouse" replaced the previous 4 mouse options
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
  "set -g mouse on"

# UTF8 is autodetected in 2.2 onwards, but errors if explicitly set
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" = 1 ]' \
  "set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on"

# Try to attach, else start new session
new-session
set -g history-limit 30000
# So stuff like resizing windows has a longer time-frame
set -g repeat-time 1000

set -g default-command "${SHELL} -l"

# Default TERM is screen, otherwise tmux. Then check if 256 colours available.
if '[ -z "$TMUX_TERM" ]' 'TMUX_TERM="screen"'
# XXX This may be slow and add a second to tmux startup! Take note!
# With this command we check to see if tmux is in the terminfo database.
# Grep for '^tmux' to avoid getting a false match from an xterm thing.
if 'command -v toe > /dev/null 2>&1 && \
    [ -n "$(toe -a 2> /dev/null | grep ^tmux)" ]' \
    'TMUX_TERM="tmux"'
set -g default-terminal "$TMUX_TERM"
# determine if we should enable 256-colour support
if-shell '[ "$(tput colors)" = "256" ]' 'set -g default-terminal "${TMUX_TERM}-256color"'
# If not installed, tmux terminfo can be found at
# https://gist.github.com/antoineco/414624c739fd2c05a2a517caa1de9eff

# Use -s to set for server - ie new connections.
# For xterm cursor changes for blinking block and line. Works for kitty.
set -sa terminal-overrides ',xterm*:Ss=\E[%p1%d q:Se=\E[2 q,'
# Truecolor/colour overrides.
set -sa terminal-overrides ',*-256color:Tc,*-kitty:Tc'
# if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.3" | bc)" = 1 ]' \
#     "set -sa terminal-overrides ',*-256color:Tc,*-kitty:Tc'"

# Don't have to stretch to the 0
set -g base-index 1
set -g pane-base-index 1

# Set window title on startup only
set-option -g set-titles on
set-option -g set-titles-string "#T"
# rename-window 

# Add status to each individual pane (in border) (only avalable since 2.3)
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.3" | bc)" = 1 ]' \
    "set -g pane-border-status top"
# Surround the active pane with a specific color for easier identification
set -g pane-active-border-style fg=blue
set -g pane-active-border-fg blue
# darker bg for inactive panes.
# set -g window-style 'fg=black,bg=colour253'
# set -g window-active-style 'fg=default,bg=default'
# set -g window-active-style 'fg=colour234,bg=colour231'
# Allows tmux to monitor for comman­d/p­rocess exits
setw -g monitor-activity on
# When a command exits in a non-active window, visually change the tab list to reflect that
set -g visual-activity on

### Status bar ###
set -g status-bg cyan
set -g status-fg white
setw -g automatic-rename on
# Refresh every 30 seconds
set -g status-interval 30
# Date, 24H time
set -g status-right '[%Y-%m-%d %H:%M]'
set -g status-right-length 20
set -g status-justify centre
set -g status-left-length 30
# Session, window, pane. Also is set to green if prefix pressed
set -g status-left '#{?client_prefix,#[bg=green],}S:#S W:#I/#{session_windows} P:#P/#{window_panes} @#h'
# Current command, flag about active pane
set-window-option -g window-status-current-format '#{pane_current_command}#F|'
set-window-option -g window-status-format '#{pane_current_command}#F#{?window_flags,, }|'
# First index should get | at start also
if-shell -b '[ $(tmux list-windows | cut -c1) = 0 ]' \
    "set -w -t :0 window-status-format '|#{pane_current_command}#F#{?window_flags,, }|'; \
    set -w -t :0 window-status-current-format '|#{pane_current_command}#F|'"
if-shell -b '[ $(tmux list-windows | cut -c1) = 1 ]' \
    "set -w -t :1 window-status-format '|#{pane_current_command}#F#{?window_flags,, }|'; \
    set -w -t :1 window-status-current-format '|#{pane_current_command}#F|'"

# super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# The effect of this is that when the output of the inner terminal exceeds the terminal’s height it is allowed to spill over into the outer terminal’s scrollback history. So long as you don’t change windows within the tmux session you can use the scrollbar of your local terminal to review the history.
# set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# set -g set-titles on
# set -g set-titles-string "#T"

# Change cursor in vim to distinguish between insert and command mode AND OTHER COLOR STUFF!
#  set-option -g terminal-overrides '*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007:Cc=\E]12;%p1%s\007:Cr=\E]112\007:Cs=\E]50;CursorShape=%?%p1%{3}%<%t%{0}%e%p1%{2}%-%;%d\007'
