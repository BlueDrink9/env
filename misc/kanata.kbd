(defcfg
;; Don't block keys I am ignoring in this setup.
 process-unmapped-keys yes

;; Specifying which keyboards to intercept.
 linux-dev (
  /dev/input/by-id/usb-Microsoft_Microsoft®_2.4GHz_Transceiver_v9.0-event-kbd
  /dev/input/by-id/usb-Microsoft_Microsoft®_2.4GHz_Transceiver_v9.0-if02-event-kbd
 )
 ;; Next version
 ;; windows-interception-keyboard-hwids ()
 ;; This will remove the lctl press that is generated alonside ralt on windows
 windows-altgr cancel-lctl-press
 )

(defvar
 tap-timeout   100
 hold-timeout  200
 tt $tap-timeout
 ht $hold-timeout
 )

(defsrc
 esc  1    2    3    4    5    6    7    8    9    0    -    =    bspc
 tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
 caps a    s    d    f    g    h    j    k    l    ;    '    ret
 lsft z    x    c    v    b    n    m    ,    .    /    rsft
 lctl lmet lalt           spc            ralt comp rctl
 )
;; _    _    _              _              _    _    _    
;; temp temp temp temp temp temp temp temp temp temp temp temp temp temp 


;; needed for changing layers without hold.
;; Next version of kanata. May not be able to concat like this for fake key name; in that case add an extra arg for fakekey name.
;; (deftemplate to_layer_alias (layer alias_name)
    ;;  (deffakekeys (concat to_ $layer) (layer-while-held $layer))
    ;;  (defalias $alias_name (on-press-fakekey (concat to_ $layer) toggle))
    ;; )
;; (expand-template to_layer_alias special Tspec)

  (deffakekeys
   to_special (layer-while-held special)
   to_numbers (layer-while-held numbers)
   to_vim (layer-while-held vim)
   to_vim_shifted (layer-while-held vim_shifted)
   to_vim_visual (layer-while-held vim_visual)
  )
  (defalias
   tspe (on-press-fakekey to_special toggle)
   tnum (on-press-fakekey to_numbers toggle)
   vim (on-press-fakekey to_vim toggle)
   Svi (on-press-fakekey to_vim_shifted toggle)
   vis (on-press-fakekey to_vim_visual toggle)
  )

  (defalias
   ;; Layer change aliases
   osl_spec (layer-toggle special)
   osl_vim (layer-toggle vim)
   osl_num (layer-toggle numbers)
   gaming_lt (tap-hold $tt $ht = (layer-switch qwerty))
   ;; sftvi (layer-while-held vim_shifted)
   sftvi XX
   lt_spec (tap-hold-release $tap-timeout $hold-timeout 5 @osl_spec)
   f12spec (tap-hold-release $tap-timeout $hold-timeout f12 @tspe)

   ;; homerow
   ;; qwerty
   v_vi (tap-hold $tap-timeout $hold-timeout v (layer-toggle vim))
   m_vi (tap-hold $tap-timeout $hold-timeout m (layer-toggle vim))
   ;; colemak
  )

  ;; Next version of kanata
  ;; (deftemplate homerow-mod (letter mod)
      ;;  (tap-hold-release $tap-timeout $hold-timeout $letter $mod)
      ;; )

  (defalias
   ;; Homerow mods
   ;; qwerty
   ;; mlCs (expand-template homerow-mod s lctl)
   mlCs (tap-hold-release $tap-timeout $hold-timeout s lctl)
   mlMd (tap-hold-release $tap-timeout $hold-timeout d lmet)
   mlAf (tap-hold-release $tap-timeout $hold-timeout f lalt)
   mrCl (tap-hold-release $tap-timeout $hold-timeout l rctl)
   mrMk (tap-hold-release $tap-timeout $hold-timeout k rmet)
   mrAj (tap-hold-release $tap-timeout $hold-timeout j ralt)
   ;; layers
   esp (tap-hold-release $tt $ht e (layer-while-held special))
   isp (tap-hold-release $tt $ht i (layer-while-held special))
   .nu (tap-hold-release $tt $ht . (layer-while-held special))
   xnu (tap-hold-release $tt $ht x (layer-while-held special))
   ;; colemak
   mlCr (tap-hold-release $tap-timeout $hold-timeout r lctl)
   mlMs (tap-hold-release $tap-timeout $hold-timeout s lmet)
   mlAt (tap-hold-release $tap-timeout $hold-timeout t lalt)
   mrCi (tap-hold-release $tap-timeout $hold-timeout i rctl)
   mrMe (tap-hold-release $tap-timeout $hold-timeout e rmet)
   mrAn (tap-hold-release $tap-timeout $hold-timeout n ralt)
   ;; layers
   fsp (tap-hold-release $tt $ht f (layer-while-held special))
   usp (tap-hold-release $tt $ht u (layer-while-held special))
  )

  (defalias
   lsft_brc  (tap-hold $tap-timeout $hold-timeout [ lsft)
   rsft_brc  (tap-hold $tap-timeout $hold-timeout ] rsft)
   spc_sft  (tap-hold $tap-timeout $hold-timeout spc rsft)
  )

  (defalias
   ;; tap-dances
   ;; td_snake_case (tap-dance snake_case)
   ;; td_slash_menu (tap-dance slash_menu)
   ;; @vim_gg)
  ;; @visual_v)
  ;; @bof_eof)
  ;; @voldn_mute)
  ;; @pauseplay)
  td_visual_v XX
  td_voldn_mute XX
  td_pauseplay XX

  vigg (tap-dance $tap-timeout (C-end C-home))
visgg (tap-dance $tap-timeout (C-S-end C-S-home))
  ;; td_visual_v (tap-dance $tap-timeout @visual_v)
  ;; td_bof_eof (tap-dance $tap-timeout (C-end C-home))
  ;; td_voldn_mute (tap-dance $tap-timeout @voldn_mute)
  ;; td_pauseplay (tap-dance $tap-timeout @pauseplay)
  )

  (defalias
   ;; Layer aliases and special functionality
   tqwe (layer-switch qwerty)
   tcol (layer-switch colemak)
   tgam (layer-switch gaming)
   slep XX
   ;; slep (system-sleep)
   prnt XX
   ;; prnt (print-screen)
   sysrq XX
   ;; sysrq (system-request)
   ;; td_voldown_mute (tap-dance $tap-timeout (volume-down mute))
   td_voldown_mute XX
   ;; vlup (volume-up)
   vlup XX
   ;; prev (media-prev-track)
   prev XX
   ;; td_playpause (tap-dance $tap-timeout (media-play-pause))
   td_playpause XX
  )

  (defalias
   rstp (dynamic-macro-record-stop-truncate 1)
   ply1 (dynamic-macro-play 1)
   ply2 (dynamic-macro-play 2)
   rec1 (dynamic-macro-record 1)
   rec2 (dynamic-macro-record 2)
   newline_after (tap-hold-release $tap-timeout $hold-timeout enter (layer-toggle vim))
   paste_up (macro home C-v ret)
   newline_up (macro home ret left)
   cut_eol (macro S-end C-x)
   yank_eol (macro S-end C-c)
   select_line (macro home S-end)
   paste_replace (macro del C-v)  ;; capital P
  )

  (defalias
   ;; Mouse aliases
   mwu (mwheel-up 50 120)
   mwd (mwheel-down 50 120)
   mwl (mwheel-left 50 120)
   mwr (mwheel-right 50 120)
   ms↑ (movemouse-up 1 1)
   ms← (movemouse-left 1 1)
   ms↓ (movemouse-down 1 1)
   ms→ (movemouse-right 1 1)
  )

  (deflayer qwerty
   esc  1    2    3    4    5                 6    6    7    8    9    0    = bspc
   tab  q    w    @esp r      t                 y    u    @isp o    p    -    ] \
   bspc a    @mlCs @mlMd @mlAf g  h    @mrAj @mrMk @mrCl ;   '    ret
   @lsft_brc z    @xnu c    @v_vi    b             n    @m_vi    ,    @.nu /    @rsft_brc

   lctl lmet lalt      @spc_sft                    rsft comp rctl
  )

  (deflayer colemak
   esc  1    2    3    4    5                 6    6    7    8    9    0    = bspc
   tab  q    w    @fsp  p    g    j    l         @usp      y      ;    -    =    bspc
   bspc a    @mlCr @mlMs @mlAt d    h    @mrAn @mrMe @mrCi o    '    ret 
   @lsft_brc z    @xnu c    @v_vi    b             k    @m_vi    ,    @.nu /    @rsft_brc

   lctl lmet lalt      @spc_sft                    rsft comp rctl
  )

  (deflayer gaming
   esc  1    2    3    4    5    6    7    8    9    0    - @gaming_lt    bspc
   tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
   caps a    s    d    f    g    h    j    k    l    ;    '    ret
   lsft z    x    c    v    lsft n    m    ,    .    /    b
   lctl lctl lalt           spc            ralt rmet rctl
  )

  (deflayer numbers
   `    f1   f2   f3   f4   f5   f6    f6   f7   f8   f9   f10  f11  f12
   _    `    `    _    _    _    _    \    \    \    -    =     @f12spec  _
   _    1    2    3    4    5    6    7    8    9    0    \    _
   _    _    _    _    _    _    _    _    \    _    [    ]

   _    _    _              _              _    _    _
  )

  (deflayer special
   @tqwe @tqwe @tcol    @tgam @tspe    @tnum   @slep lrld    _        _        _      _    @prnt @sysrq
   _    _    @mwl     @ms↑  @mwr     _      _    _    home     up       end    _    _
   caps _    @ms←     @ms↓  @ms→     @mwu    _    pgup left     down     rght  _    _
   _    _    mlft    mmid mrgt    @mwd    _    pgdn ralt     comp     rctl   _    _

   lctl lmet mlft           spc            mrgt comp rctl
  )

  (deflayer vim
   @vim         @rstp @ply1    @ply2 end         _         _    _          _      home          _    _      _
   @rec2        @rec1 C-rght _       C-v      @vigg down rght C-z     C-c _             _    _
   _              end     bspc       _       _           C-x    left _     C-rght @vim @newline_after _    _
   @Svi _       del        C-x     @vis C-left _    _     up         _      _             _    C-f @Svi

   _    _    _              _              _    _    _    
  )

  (deflayer vim_shifted
   _    _    _    _    end         _       _    _    _    _    home       _    _    _
   _    _    _    _    @paste_up    C-end   _    _    _    _    @yank_eol   _    _    _
   _    end  _    _    _           @cut_eol _    _    _    home @newline_up _    _
   @Svi _    bspc _    @select_line _       _    _    _    _    _          _

   _    _    _              _              _    _    _    
  )

  (deflayer vim_visual
   @vis _    _        _    S-end         _          _      _      _        _    S-home _    _    _
   _             _    C-S-rght _    @paste_replace @visgg S-down S-rght C-z      C-c  _      _    _    _
   _             _    _        _    _             C-x        S-left _      C-S-rght _    _      _    _
   _             _    bspc     _    @vis C-S-left   S-up   _      S-tab    tab  _      _

   _    _    _              _              _    _    _
  )

