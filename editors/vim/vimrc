set nocompatible

augroup myVimrc
    au!
augroup end

function! PathExpand(path)
    " Version 7.1 doesn't support fnameescape. Used on iOS.
    " Besides, if you're using 7.1, it's because it's a pre-installed default,
    " meaning it's unix, meaning "/" is the right path separator anyway.
    if v:version >= 703
        return fnameescape(expand(a:path))
    else
        return expand(a:path)
    endif
endfunction

" Folder in which current script resides:
" let s:scriptpath = PathExpand(<sfile>:p:h)
" Handles symlinks, etc.
let s:scriptpath = fnamemodify(resolve(expand('<sfile>:p')), ':h')

let g:remoteSession = ($SSH_CLIENT != "")

" let g:vimrcdir = fnamemodify(expand("$MYVIMRC"), ":p:h")
  let g:vimrcdir = expand("$HOME", ":p:h")
if has('nvim')
    let g:vimrcdir = expand("$HOME", ":p:h")
endif
" Automatically create vimfile directories in same location as vimrc
function! CreateVimDir(dir)
    let l:dir = PathExpand(g:vimrcdir . '/' . a:dir)
    if has('win32')
        let l:dir = escape(l:dir, '\')
    endif
    if filewritable(g:vimrcdir) && !isdirectory(l:dir)
        silent exec "call mkdir(\"" . l:dir . "\")"
    endif
    return l:dir
endfunction
if has('win32')
  let g:vimfilesDir="vimfiles"
else
  let g:vimfilesDir=".vim"
endif
call CreateVimDir(g:vimfilesDir)

function! SourceCustoms(...)
    for vimfile in a:000
        " Converts the path properly for win or unix
        exec 'source ' . s:scriptpath . expand('/' . vimfile)
    endfor
endfunction

" These settings affect what plugins are loaded, plus a couple of settings.
" Set here to ensure consistency.
if exists("g:liteMode") && g:liteMode==1
    let g:ideMode=0
endif
if exists("g:ideMode") && g:ideMode==1
    let g:liteMode=0
endif

" For custom snippets, templates, ftplugins etc kept under VCS.
let &runtimepath.=',' . s:scriptpath . expand('/runtimepath')

" Mappings after plugins, to override any plugin clobbers (although really, I
" should just configure the plugins better).
exec SourceCustoms("functions.vim", "settings.vim", "plugins.vim", "mappings.vim")
if !exists('g:colors_name')
    exec 'colorscheme ' . g:fallbackColorSch
endif
