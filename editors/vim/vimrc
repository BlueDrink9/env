" argadd install.sh ~/.vim/vimrc ~/.config/nvim/init.vim vimrc nvimrc settings.vim functions.vim mappings.vim ide_mappings.vim plugins.vim plugins/light_plugins.vim plugins/main_plugins.vim plugins/ide_plugins.vim
set nocompatible
" Use this line to let vim versions < 7.4 pick up .vim/vimrc.
" runtime vimrc

augroup myVimrc
    au!
augroup end

function! PathExpand(path)
    return fnameescape(expand(a:path))
endfunction

function! CreateDir(dir)
    if has('win32')
        let l:dir = escape(a:dir, '\')
    else
        let l:dir = a:dir
    endif
    if !isdirectory(l:dir)
        silent exec 'call mkdir("' . l:dir . '", "p")'
    endif
endfunction

" Folder in which current script resides:
" Handles symlinks, etc.
let s:scriptdir = fnamemodify(resolve(expand('<sfile>:p')), ':h')

let g:remoteSession = ($SSH_CLIENT != "")

let g:vimfilesParentDir = expand("$HOME", ":p:h")
if has('win32')
  let s:vimfilesDirName="vimfiles"
else
  let s:vimfilesDirName=".vim"
endif
let g:vimfilesDir = PathExpand(g:vimfilesParentDir . '/' . s:vimfilesDirName)

" Automatically create vimfile directories in same location as vimrc
function! CreateVimDir(dir)
    let l:fullDir = PathExpand(g:vimfilesDir . '/' . a:dir)
    call CreateDir(l:fullDir)
    return l:fullDir
endfunction

function! SourceCustoms(...)
    for vimfile in a:000
        " Converts the path properly for win or unix
        exec 'source ' . s:scriptdir . expand('/' . vimfile)
    endfor
endfunction

" These settings affect what plugins are loaded, plus a couple of settings.
" Set here to ensure consistency.
if $LITE_SYSTEM != ""
    let g:liteMode=1
endif
if !exists("g:ideMode")
    let g:ideMode=0
elseif g:ideMode==1
    let g:liteMode=0
endif
if !exists("g:liteMode")
    let g:liteMode=0
elseif g:liteMode==1
    let g:ideMode=0
endif

" For custom snippets, templates, ftplugins etc kept under VCS.
let &runtimepath.=',' . s:scriptdir . expand('/runtimepath')

" Mappings after plugins, to override any plugin clobbers (although really, I
" should just configure the plugins better).
exec SourceCustoms(
      \ "functions.vim",
      \ "settings.vim",
      \ "ide_mappings.vim",
      \ "plugins.vim",
      \ "mappings.vim"
      \)
silent doautocmd User MappingOverrides
if !exists('g:colors_name') && exists('g:fallbackColorSch')
    exec 'colorscheme ' . g:fallbackColorSch
endif
