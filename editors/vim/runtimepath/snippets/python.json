{
  "init": {
    "prefix": ["init"],
    "body": [
      "def __init__(self, ${1:arg}):"
      , "self.${1} = ${1}"
    ],
    "description": "Class __init__ method"
  }

  , "Pandas import": {
    "prefix": ["pd"],
    "body": [
      "import pandas as pd"
    ]
  }

  , "Numpy import": {
    "prefix": ["np"],
    "body": [
      "import numpy as np"
    ]
  },

  "Matplotlib and seaborn import": {
    "prefix": ["plt", "sns"],
    "body": [
      "from matplotlib import pyplot as plt"
      , "import seaborn as sns"
    ]
  }

  , "Path import": {
    "prefix": ["pathlib"],
    "body": [
      "from pathlib import Path"
    ]
  }

  , "Create pathlib directory": {
    "prefix": ["dir"],
    "body": [
      "from pathlib import Path"
      , "$1 = script_dir / \"$2\""
      , "$1.mkdir(exist_ok=True, parents=True)"
    ]
  }


  , "pytest skip": {
    "prefix": ["skip"],
    "body": [
      "@pytest.mark.skip"
    ]
  }

  , "pytest parametrize": {
    "prefix": ["param"],
    "body": [
      "@pytest.mark.parametrize('case, expected, reason', ["
      , "('',"
      , "'',"
      , "''),"
      , "])"
    ]
  }

  , "Set scriptdir": {
    "prefix": ["scriptdir"],
    "body": [
      "from pathlib import Path"
      , "script_dir = Path(__file__).parent"
    ]
  }

  , "View pandas dataframe": {
    "prefix": ["view"],
    "body": [
      "from gtabview import view"
      , "view(${1})"
    ]
  }

  , "Logger creation module contents": {
    "prefix": ["logger_module"],
    "body": [
      "import logging"
      , "import logging.handlers"
      , "from pathlib import Path"
      , "script_dir = Path(__file__).parent"
      , "log_dir = script_dir / \"logs\""
      , "log_dir.mkdir(exist_ok=True, parents=True)"
      , ""
      , ""
      , "def create_logger(name):"
      , "  logger = logging.getLogger(name)"
      , "  logger.setLevel(logging.INFO)"
      , "  logger.setLevel(logging.INFO)"
      , "  console_handler = logging.StreamHandler()"
      , "  file_handler = logging.handlers.RotatingFileHandler("
      , "     log_dir / 'file.log', maxBytes=100*1000*1000, backupCount=5"
      , "  )"
      , "  console_handler.setLevel(logging.INFO)"
      , "  file_handler.setLevel(logging.DEBUG)"
      , "  console_format = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')"
      , "  file_format = logging.Formatter('%(asctime)s - %(filename)s - %(levelname)s - %(funcName)s - %(message)s')"
      , "  console_handler.setFormatter(console_format)"
      , "  file_handler.setFormatter(file_format)"
      , "  logger.addHandler(console_handler)"
      , "  logger.addHandler(file_handler)"
      , "  return logger"

    ]
  }

  , "Import and create logger": {
    "prefix": ["logger"],
    "body": [
      "from logger import create_logger"
      , "logger = create_logger(__file__)"
    ]
  }

  , "Train test split": {
    "prefix": ["tts"],
    "body": [
      "from sklearn.model_selection import train_test_split"
      , ""
      , "X_train, X_test, y_train, y_test = train_test_split("
      ,     "${1:X}, y, test_size=${2:0.33}, random_state=$3)"
    ]
  }

}
