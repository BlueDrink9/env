[
    // "when": "!neovim.init"
    // "when": "vim.active"

    {
        "key": "ctrl+k",
        "command": "workbench.action.navigateUp",
        // "when": "terminalFocus"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.navigateDown",
        // "when": "terminalFocus"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.navigateLeft",
        // "when": "terminalFocus"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.navigateRight",
        // "when": "terminalFocus"
    },

    // -- Completion --
    // Tab complete like vim - cycle between candidates with Tab
    {
        "key": "tab",
        "command": "selectNextQuickFix",
        "when": "editorFocus && quickFixWidgetVisible && (neovim.mode == 'insert' || vim.mode == 'insert')"
    },
    {
        "key": "shift+tab",
        "command": "selectPrevQuickFix",
        "when": "editorFocus && quickFixWidgetVisible && (neovim.mode == 'insert' || vim.mode == 'insert')"
    },

    {
        "key": "tab",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    // When only inline suggestion visible, use tab to accept it.
    {
        "key": "tab",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    },
    // When only one suggestion visible, use tab to accept it.
    {
        "key": "tab",
        "command": "runCommands",
        "args": {
            "commands": [
                {"command": "selectNextSuggestion"},
                {"command": "acceptSelectedSuggestion"},
            ]
        },
        "when": "suggestWidgetVisible && !suggestWidgetMultipleSuggestions && textInputFocus"
    },
    {
        "key": "ctrl+e",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+e",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    },

    // Space, punction and ( confirm the completion and inputs a space. Hoping this is feels at least a little more natural than ctrl+e or tab...
    // Not while inDebugRepl because it is buggled and completions still autoselect. Once that is fixed, that limitation can be removed.
    {
        "key": "space",
        "command": "runCommands",
        "args": {
            "commands": [
                {"command": "acceptSelectedSuggestion"},
                {"command": "type", "args": {"text": " "}}
            ]
        },
        "when": "suggestWidgetVisible && textInputFocus && !inDebugRepl"
    },
    {
        "key": "(",
        "command": "runCommands",
        "args": {
            "commands": [
                {"command": "acceptSelectedSuggestion"},
                {"command": "type", "args": {"text": "("}}
            ]
        },
        "when": "suggestWidgetVisible && textInputFocus && !inDebugRepl"
    },
    {
        "key": ",",
        "command": "runCommands",
        "args": {
            "commands": [
                {"command": "acceptSelectedSuggestion"},
                {"command": "type", "args": {"text": ","}}
            ]
        },
        "when": "suggestWidgetVisible && textInputFocus && !inDebugRepl"
    },
    {
        "key": "=",
        "command": "runCommands",
        "args": {
            "commands": [
                {"command": "acceptSelectedSuggestion"},
                {"command": "type", "args": {"text": "="}}
            ]
        },
        "when": "suggestWidgetVisible && textInputFocus && !inDebugRepl"
    },
    {
        "key": "\"",
        "command": "runCommands",
        "args": {
            "commands": [
                {"command": "acceptSelectedSuggestion"},
                {"command": "type", "args": {"text": "\""}}
            ]
        },
        "when": "suggestWidgetVisible && textInputFocus && !inDebugRepl"
    },
    {
        "key": "shift+9",
        "command": "runCommands",
        "args": {
            "commands": [
                {"command": "acceptSelectedSuggestion"},
                {"command": "type", "args": {"text": "("}}
            ]
        },
        "when": "suggestWidgetVisible && textInputFocus && !inDebugRepl"
    },
    {
        "key": "k",
        "command": "runCommands",
        "args": {
            "commands": [
                {"command": "acceptSelectedSuggestion"},
                {"command": "type", "args": {"text": "k"}}
            ]
        },
        "when": "suggestWidgetVisible && textInputFocus && !inDebugRepl"
    },
    {
        "key": "v",
        "command": "runCommands",
        "args": {
            "commands": [
                {"command": "acceptSelectedSuggestion"},
                {"command": "type", "args": {"text": "v"}}
            ]
        },
        "when": "suggestWidgetVisible && textInputFocus && !inDebugRepl"
    },

    {
        // Removing this allows ctrl+e to work in terminal
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "shift+tab",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },


    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },

    {
        "key": "alt+right",
        "command": "-workbench.action.navigateForward"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },

    {
        "key": "left",
        "command": "workbench.action.previousEditor",
        "when": "editorTextFocus && (neovim.mode == 'normal' || vim.mode == 'normal')"
    },
    {
        "key": "right",
        "command": "workbench.action.nextEditor",
        "when": "editorTextFocus && (neovim.mode == 'normal' || vim.mode == 'normal')"
    },
    {
        "key": "left",
        "command": "-cursorLeft",
        "when": "textInputFocus && (neovim.mode != 'normal' && vim.mode != 'normal')"
    },
    {
        "key": "right",
        "command": "-cursorRight",
        "when": "textInputFocus && (neovim.mode != 'normal' && vim.mode != 'normal')"
    },
    // {
    //     "key": "left",
    //     "command": "-workbench.statusBar.focusPrevious",
    //     "when": "statusBarFocused"
    // },
    // {
    //     "key": "right",
    //     "command": "-workbench.statusBar.focusNext",
    //     "when": "statusBarFocused"
    // },
    {
        "key": "left",
        "command": "-notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
     {
        "key": "right",
        "command": "-notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    { "key": "space g w",
        "when": "editorTextFocus && vim.active && vim.mode == 'normal'",
        "command": "git.stage"
    },
    { "key": "space g w",
        "when": "editorTextFocus && vim.active && vim.mode == 'visual'",
        "command": "git.diff.stageSelection"
    },
    { "key": "space g c c",
        "when": "editorTextFocus && vim.active && vim.mode == 'normal'",
        "command": "magit.commit"
    },

    {
        "key": "g g",
        "command": "cursorTop",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    { "key": "g r",
        "command": "magit.refresh",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },

    {
        "key": "ctrl+s",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+h",
        "when": "editorTextFocus && vim.active",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+l",
        "when": "editorTextFocus && vim.active",
        "command": "workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+k",
        "when": "editorTextFocus && vim.active",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+j",
        "when": "editorTextFocus && vim.active",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+w h",
        "when": "editorTextFocus && vim.active",
        "command": "workbench.action.splitEditorLeft"
    },
    {
        "key": "ctrl+w l",
        "when": "editorTextFocus && vim.active",
        "command": "workbench.action.splitEditorRight"
    },
    {
        "key": "ctrl+w k",
        "when": "editorTextFocus && vim.active",
        "command": "workbench.action.splitEditorUp"
    },
    {
        "key": "ctrl+w j",
        "when": "editorTextFocus && vim.active",
        "command": "workbench.action.splitEditorDown"
    },

    {
        "key": "x",
        "command": "magit.discard-at-point",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "k",
        "command": "-magit.discard-at-point"
    },
    {
        "key": "-",
        "command": "magit.reverse-at-point",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "v",
        "command": "-magit.reverse-at-point"
    },
    {
        "key": "shift+-",
        "command": "magit.reverting",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "shift+v",
        "command": "-magit.reverting"
    },
    {
        "key": "shift+o",
        "command": "magit.resetting",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "shift+x",
        "command": "-magit.resetting"
    },
    {
        "key": "x",
        "command": "-magit.reset-mixed"
    },
    {
        "key": "ctrl+u x",
        "command": "-magit.reset-hard"
    },

    { "key": "space g g",
        "when": "editorTextFocus && vim.active && vim.mode != 'insert'",
        "command": "magit.status"
    },
    { "key": "tab",
        "command": "magit.toggle-fold",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/ && (neovim.mode != 'insert' && vim.mode != 'insert')"
    },
    { "key": "backspace",
        "command": "magit.toggle-fold",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/ && (neovim.mode != 'insert' && vim.mode != 'insert')"
    },

    {
        "key": "space s",
        "when": "editorTextFocus && vim.active && vim.mode != 'normal' && editorLangId == 'sql'",
        "command": "mssql.runQuery"
    },
    {
        "key": "space s ctrl+c",
        "when": "editorTextFocus && vim.active && vim.mode != 'normal' && editorLangId == 'sql'",
        "command": "mssql.cancelQuery"
    },
    {
        "key": "space s",
        "when": "editorTextFocus && vim.active && vim.mode != 'normal' && editorLangId == 'python' && !inReferenceSearchEditor && !isInEmbeddedEditor",
        "command": "jupyter.execSelectionInteractive"
    },
    {
        "key": "space shift+s",
        "when": "editorTextFocus && vim.active && vim.mode != 'normal' && editorLangId == 'python'",
        "command": "jupyter.runFileInteractive"
    },
    {
        "key": "ctrl+shift+alt+meta+`",
        "command": "command-server.runCommand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+alt+meta+`",
        "command": "command-server.runCommand",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+alt+p",
        "command": "-command-server.runCommand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+alt+p",
        "command": "-command-server.runCommand",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+alt+meta+`",
        "command": "command-server.runCommand"
    },
    {
        "key": "ctrl+shift+alt+p",
        "command": "-command-server.runCommand"
    },
]
